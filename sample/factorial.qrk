{
  (let - sub)
  (let = equal)
  (let . (fn (f g x) (f (g x))))
  (let $ (fn (f x) (f x)))
  (let flip (fn (f a b) (f b a)))

  (let add (. (flip sub) (sub 0)))
  (let mul (. (flip div) (div 1)))

  (let concat (fn (xs ys) [(... xs) (... ys)]))
  (let ++ concat)
  (let : (fn (a) (concat [a])))
  

  #(print (++ [5 2] [3]))
  #(let factorial (fn (n) (match n [
  #  [0 1]
  #  [_ (mul n (factorial (sub n 1)))]
  #])))
  #(print (factorial 5))

  (let map (fn (cb arr) (match arr [
    [[] []]
    [x [] ([(cb x)])]
    [x xs (++ [(cb x)] (map cb xs))]
  ])))
  (print [(spread [1 2 3]) (spread [4 5 6])])
  
  (let foldl (fn (cb acc array) (match array [
    [[] acc]
    [x [] (cb acc x)]
    [x xs (foldl cb (cb acc x) xs)]
  ])))

  (let length (fn (array) (match array [
    [[] 0]
    [_ [] 1]
    [_ xs (add 1 (length xs))] 
  ])))

  (print (map (add 2) [1 2 3]))
  (print (foldl (add) 0 [1 2 3]))
  (print (length [1 2 3]))
}